environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\GüneyÜnal\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'DESKTOP-O9H046M', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\GüneyÜnal', 'LOCALAPPDATA': 'C:\\Users\\GüneyÜnal\\AppData\\Local', 'LOGONSERVER': '\\\\DESKTOP-O9H046M', 'NUMBER_OF_PROCESSORS': '12', 'ONEDRIVE': 'C:\\Users\\GüneyÜnal\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\GüneyÜnal\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Users\\GNEYNA~1\\AppData\\Local\\Temp\\_MEI114682\\pywin32_system32;C:\\Users\\GüneyÜnal\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\Scripts;C:\\Program Files (x86)\\VMware\\VMware Player\\bin\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\PuTTY\\;C:\\Program Files\\PowerShell\\7\\;C:\\Program Files\\Git\\cmd;C:\\Users\\GüneyÜnal\\AppData\\Local\\Microsoft\\WindowsApps;C:\\msys64\\mingw64\\bin;C:\\Users\\GüneyÜnal\\Desktop\\Microsoft VS Code\\bin', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'POWERSHELL_DISTRIBUTION_CHANNEL': 'MSI:Windows 10 Education', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 158 Stepping 10, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9e0a', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\GNEYNA~1\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\GNEYNA~1\\AppData\\Local\\Temp', 'USERDOMAIN': 'AzureAD', 'USERDOMAIN_ROAMINGPROFILE': 'AzureAD', 'USERNAME': 'GüneyÜnal', 'USERPROFILE': 'C:\\Users\\GüneyÜnal', 'WINDIR': 'C:\\Windows', 'ZES_ENABLE_SYSMAN': '1', '__COMPAT_LAYER': 'DetectorsAppHealth'})